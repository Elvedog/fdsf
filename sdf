#include <glm/glm.hpp>
#include <glm/gtc/constants.hpp>
#include <vector>
#include <iostream>
#include <fstream>
#include <limits>
#include <cmath>
#include <cstdlib>
#include <algorithm> 
struct Ray {
	glm::vec3 origin;
	glm::vec3 direction;

	Ray(const glm::vec3& o, const glm::vec3& d) : origin(o), direction(glm::normalize(d)) {}
};

class SceneObject {
public:
	glm::vec3 color;
	float specularStrength;
	float shininess;
	float transparency;
	float refractiveIndex;

	SceneObject(const glm::vec3& col, float specStrength, float shine, float transp, float refractIdx)
		: color(col), specularStrength(specStrength), shininess(shine), transparency(transp), refractiveIndex(refractIdx) {}

	virtual bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const = 0;
	virtual ~SceneObject() {}
};

class Sphere : public SceneObject {
private:
	glm::vec3 center;
	float radius;

public:
	Sphere(const glm::vec3& c, float r, const glm::vec3& col, float specStrength, float shine, float transp, float refractIdx)
		: SceneObject(col, specStrength, shine, transp, refractIdx), center(c), radius(r) {}

	bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const {
		glm::vec3 oc = ray.origin - center;
		float a = glm::dot(ray.direction, ray.direction);
		float b = 2.0f * glm::dot(oc, ray.direction);
		float c = glm::dot(oc, oc) - radius * radius;
		float discriminant = b * b - 4 * a * c;
		if (discriminant > 0) {
			float dist = (-b - sqrt(discriminant)) / (2.0f * a);
			if (dist > 0 && dist < distance) {
				distance = dist;
				normal = glm::normalize(ray.origin + ray.direction * distance - center);
				return true;
			}
		}
		return false;
	}
};

class Room : public SceneObject {
private:
	glm::vec3 minCorner;
	glm::vec3 maxCorner;

public:
	Room(const glm::vec3& min, const glm::vec3& max, const glm::vec3& col)
		: SceneObject(col, 0.0f, 0.0f, 0.0f, 0.0f), minCorner(min), maxCorner(max) {}

	bool intersect(const Ray& ray, float& distance, glm::vec3& normal) const {
		glm::vec3 tmin = (minCorner - ray.origin) / ray.direction;
		glm::vec3 tmax = (maxCorner - ray.origin) / ray.direction;
		glm::vec3 t1 = glm::min(tmin, tmax);
		glm::vec3 t2 = glm::max(tmin, tmax);
		float tNear = glm::max(glm::max(t1.x, t1.y), t1.z);
		float tFar = glm::min(glm::min(t2.x, t2.y), t2.z);

		if (tNear > tFar || tFar < 0.0f) {
			return false;
		}

		if (tNear > 0 && tNear < distance) {
			distance = tNear;
			normal = glm::vec3(1.0f, 0.0f, 0.0f);
			return true;
		}

		return false;
	}
};

class PointLight {
public:
	glm::vec3 position;
	glm::vec3 color;
	float intensity;

	PointLight(const glm::vec3& pos, const glm::vec3& col, float inten)
		: position(pos), color(col), intensity(inten) {}
};

glm::vec3 calculateLighting(const glm::vec3& point, const glm::vec3& normal, const glm::vec3& viewDir, const PointLight& light){
	glm::vec3 lightDir = glm::normalize(light.position - point);
	glm::vec3 ambient = 0.1f * light.color;
	float diffuseStrength = glm::max(glm::dot(normal, lightDir), 0.0f);
	glm::vec3 diffuse = diffuseStrength * light.intensity * light.color;
	glm::vec3 reflectDir = glm::reflect(-lightDir, normal);
	float specularStrength = glm::pow(glm::max(glm::dot(viewDir, reflectDir), 0.0f), 32.0f);
	glm::vec3 specular = specularStrength * light.intensity * light.color;
	glm::vec3 result = (ambient + diffuse + specular);
	return result;
}

bool isInShadow(const Ray& shadowRay, const std::vector<SceneObject*>& objects, float lightDistance) {
	glm::vec3 normal;
	float distance = std::numeric_limits<float>::max();
	for (size_t i = 0; i < objects.size(); ++i) {
		if (objects[i]->intersect(shadowRay, distance, normal) && distance < lightDistance) {
			return true;
		}
	}
	return false;
}

glm::vec3 refract(const glm::vec3& I, const glm::vec3& N, const float& ior) {
	float cosi = glm::clamp(-1.0f, 1.0f, glm::dot(I, N));
	float etai = 1, etat = ior;
	glm::vec3 n = N;
	if (cosi < 0) { cosi = -cosi; }
	else { std::swap(etai, etat); n = -N; }
	float eta = etai / etat;
	float k = 1 - eta * eta * (1 - cosi * cosi);
	return k < 0 ? glm::vec3(0) : eta * I + (eta * cosi - static_cast<float>(sqrt(k))) * n;
}

glm::vec3 reflect(const glm::vec3& I, const glm::vec3& N) {
	return I - 2 * glm::dot(I, N) * N;
}

glm::vec3 trace(const Ray& ray, const std::vector<SceneObject*>& objects, const std::vector<PointLight>& lights, int depth) {
	if (depth <= 0) {
		return glm::vec3(0);
	}
	float closestDistance = std::numeric_limits<float>::max();
	glm::vec3 closestNormal;
	glm::vec3 pixelColor(0);
	SceneObject* closestObject = NULL;
	for (size_t i = 0; i < objects.size(); ++i) {
		glm::vec3 normal;
		float distance = std::numeric_limits<float>::max();
		if (objects[i]->intersect(ray, distance, normal)) {
			if (distance < closestDistance) {
				closestDistance = distance;
				closestNormal = normal;
				closestObject = objects[i];
			}
		}
	}
	if (closestObject) {
		glm::vec3 point = ray.origin + ray.direction * closestDistance;
		if (closestObject->specularStrength > 0) {
			glm::vec3 reflectDir = reflect(ray.direction, closestNormal);
			Ray reflectedRay(point + reflectDir * 0.001f, reflectDir);
			glm::vec3 reflectedColor = trace(reflectedRay, objects, lights, depth - 1);
			pixelColor += closestObject->specularStrength * reflectedColor;
		}
		if (closestObject->transparency > 0) {
			glm::vec3 refractDir = refract(ray.direction, closestNormal, closestObject->refractiveIndex);
			Ray refractedRay(point + refractDir * 0.001f, refractDir);
			glm::vec3 refractedColor = trace(refractedRay, objects, lights, depth - 1);
			pixelColor += closestObject->transparency * refractedColor;
		}
		for (size_t j = 0; j < lights.size(); ++j) {
			if (!isInShadow(Ray(point + closestNormal * 0.001f, glm::normalize(lights[j].position - point)), objects, glm::length(lights[j].position - point))) {
				glm::vec3 lighting = calculateLighting(point, closestNormal, -ray.direction, lights[j]);
				pixelColor += lighting * closestObject->color;
			}
		}
		return pixelColor;
	}
	else {
		return glm::vec3(static_cast<float>(rand()) / RAND_MAX, static_cast<float>(rand()) / RAND_MAX, static_cast<float>(rand()) / RAND_MAX);
	}
}

class Scene {
public:
	std::vector<SceneObject*> objects;
	~Scene() {
		for (size_t i = 0; i < objects.size(); ++i) {
			delete objects[i];
		}
	}
};
glm::vec3 gammaCorrect(const glm::vec3& color, float gamma) {
	return glm::pow(color, glm::vec3(1.0f / gamma));
}
void createSolarSystem(Scene& scene) {
	scene.objects.push_back(new Room(glm::vec3(-10, -10, -10), glm::vec3(10, 10, 10), glm::vec3(0.2, 0.2, 0.2)));
	// Add spheres to the scene
	scene.objects.push_back(new Sphere(glm::vec3(7.0, -1.0, -5), 3.0, glm::vec3(1.0, 1.0, 0.0), 0.7, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(-2.5, -1.0, -5), 0.2, glm::vec3(0.5, 0.5, 0.5), 0.2, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(-3.5, -1.0, -5), 0.3, glm::vec3(0.9, 0.7, 0.2), 0.4, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(-5.0, -1.0, -5), 0.4, glm::vec3(0.0, 0.0, 1.0), 0.5, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(-7.0, -1.0, -5), 0.3, glm::vec3(1.0, 0.0, 0.0), 0.4, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(2.0, -1.0, -5), 1.0, glm::vec3(0.7, 0.5, 0.3), 0.6, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(5.0, -1.0, -5), 0.9, glm::vec3(0.8, 0.6, 0.2), 0.6, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(9.0, -1.0, -5), 0.5, glm::vec3(0.2, 0.4, 0.8), 0.5, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(12.0, -1.0, -5), 0.5, glm::vec3(0.1, 0.1, 0.7), 0.5, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(0.0, 10.0, -15), 1.0, glm::vec3(1.0, 1.0, 1.0), 1.0, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(-5.0, 2.0, -10), 0.2, glm::vec3(0.7, 0.2, 0.1), 0.5, 32, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(0.0, 10.0, -15), 1.0, glm::vec3(1.0, 1.0, 1.0), 1.0, 128, 0.0, 0.0));
	scene.objects.push_back(new Sphere(glm::vec3(-5.0, 2.0, -10), 0.2, glm::vec3(0.7, 0.2, 0.1), 0.5, 32, 0.0, 0.0));
}
void renderSolarSystem(int width, int height, int samplesPerPixel) {
	Scene scene;
	std::vector<PointLight> lights;

	createSolarSystem(scene);
	lights.push_back(PointLight(glm::vec3(0, 5, -5), glm::vec3(1, 1, 1), 5.0));

	std::ofstream out("solar_system.ppm");

	if (!out.is_open()) {
		std::cerr << "Error: Unable to open the output file." << std::endl;
		return;
	}


	out << "P3\n" << width << ' ' << height << "\n255\n";

	for (int j = 0; j < height; ++j) {
		for (int i = 0; i < width; ++i) {
			glm::vec3 pixelColor(0);

			for (int s = 0; s < samplesPerPixel; ++s) {
				float u = (i + (s + static_cast<float>(rand()) / RAND_MAX) / samplesPerPixel) / width;
				float v = (j + (s + static_cast<float>(rand()) / RAND_MAX) / samplesPerPixel) / height;
				float x_jittered = (2 * u - 1) * width / static_cast<float>(height);
				float y_jittered = 1 - 2 * v;

				Ray ray(glm::vec3(0, 0, 0), glm::vec3(x_jittered, y_jittered, -1));
				glm::vec3 color = trace(ray, scene.objects, lights, 5);
				pixelColor += color;
			}

			pixelColor /= samplesPerPixel;
			pixelColor = gammaCorrect(pixelColor, 2.2f); 

		
			// Clamping and converting to integer values
			int red = static_cast<int>(glm::clamp(pixelColor.r, 0.0f, 1.0f) * 255);
			int green = static_cast<int>(glm::clamp(pixelColor.g, 0.0f, 1.0f) * 255);
			int blue = static_cast<int>(glm::clamp(pixelColor.b, 0.0f, 1.0f) * 255);

			out << red << ' ' << green << ' ' << blue << '\n';
		}
	}

	out.close();
}

int main() {
	const int imageWidth = 800;
	const int imageHeight = 600;
	const int samplesPerPixel = 16;
	srand(time(NULL));
	renderSolarSystem(imageWidth, imageHeight, samplesPerPixel);

	std::cout << "Done!" << std::endl;
	return 0;
}



